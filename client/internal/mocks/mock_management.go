// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GophKeeper/api/proto (interfaces: ManagementServiceClient)

// Package mock_proto is a generated GoMock package.
package mocks

import (
        context "context"
        reflect "reflect"

        proto "github.com/GophKeeper/api/proto"
        gomock "github.com/golang/mock/gomock"
        grpc "google.golang.org/grpc"
        emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockManagementServiceClient is a mock of ManagementServiceClient interface.
type MockManagementServiceClient struct {
        ctrl     *gomock.Controller
        recorder *MockManagementServiceClientMockRecorder
}

// MockManagementServiceClientMockRecorder is the mock recorder for MockManagementServiceClient.
type MockManagementServiceClientMockRecorder struct {
        mock *MockManagementServiceClient
}

// NewMockManagementServiceClient creates a new mock instance.
func NewMockManagementServiceClient(ctrl *gomock.Controller) *MockManagementServiceClient {
        mock := &MockManagementServiceClient{ctrl: ctrl}
        mock.recorder = &MockManagementServiceClientMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementServiceClient) EXPECT() *MockManagementServiceClientMockRecorder {
        return m.recorder
}

// AddBankCard mocks base method.
func (m *MockManagementServiceClient) AddBankCard(arg0 context.Context, arg1 *proto.BankCard, arg2 ...grpc.CallOption) (*proto.BankCard, error) {
        m.ctrl.T.Helper()
        varargs := []interface{}{arg0, arg1}
        for _, a := range arg2 {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "AddBankCard", varargs...)
        ret0, _ := ret[0].(*proto.BankCard)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// AddBankCard indicates an expected call of AddBankCard.
func (mr *MockManagementServiceClientMockRecorder) AddBankCard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{arg0, arg1}, arg2...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBankCard", reflect.TypeOf((*MockManagementServiceClient)(nil).AddBankCard), varargs...)
}

// AddFile mocks base method.
func (m *MockManagementServiceClient) AddFile(arg0 context.Context, arg1 *proto.File, arg2 ...grpc.CallOption) (*proto.File, error) {
        m.ctrl.T.Helper()
        varargs := []interface{}{arg0, arg1}
        for _, a := range arg2 {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "AddFile", varargs...)
        ret0, _ := ret[0].(*proto.File)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// AddFile indicates an expected call of AddFile.
func (mr *MockManagementServiceClientMockRecorder) AddFile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{arg0, arg1}, arg2...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockManagementServiceClient)(nil).AddFile), varargs...)
}

// AddLoginData mocks base method.
func (m *MockManagementServiceClient) AddLoginData(arg0 context.Context, arg1 *proto.LoginData, arg2 ...grpc.CallOption) (*proto.LoginData, error) {
        m.ctrl.T.Helper()
        varargs := []interface{}{arg0, arg1}
        for _, a := range arg2 {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "AddLoginData", varargs...)
        ret0, _ := ret[0].(*proto.LoginData)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// AddLoginData indicates an expected call of AddLoginData.
func (mr *MockManagementServiceClientMockRecorder) AddLoginData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{arg0, arg1}, arg2...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLoginData", reflect.TypeOf((*MockManagementServiceClient)(nil).AddLoginData), varargs...)
}

// AddText mocks base method.
func (m *MockManagementServiceClient) AddText(arg0 context.Context, arg1 *proto.Text, arg2 ...grpc.CallOption) (*proto.Text, error) {
        m.ctrl.T.Helper()
        varargs := []interface{}{arg0, arg1}
        for _, a := range arg2 {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "AddText", varargs...)
        ret0, _ := ret[0].(*proto.Text)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// AddText indicates an expected call of AddText.
func (mr *MockManagementServiceClientMockRecorder) AddText(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{arg0, arg1}, arg2...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddText", reflect.TypeOf((*MockManagementServiceClient)(nil).AddText), varargs...)
}

// DeleteBankCard mocks base method.
func (m *MockManagementServiceClient) DeleteBankCard(arg0 context.Context, arg1 *proto.BankCard, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
        m.ctrl.T.Helper()
        varargs := []interface{}{arg0, arg1}
        for _, a := range arg2 {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "DeleteBankCard", varargs...)
        ret0, _ := ret[0].(*emptypb.Empty)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// DeleteBankCard indicates an expected call of DeleteBankCard.
func (mr *MockManagementServiceClientMockRecorder) DeleteBankCard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{arg0, arg1}, arg2...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBankCard", reflect.TypeOf((*MockManagementServiceClient)(nil).DeleteBankCard), varargs...)
}

// DeleteFile mocks base method.
func (m *MockManagementServiceClient) DeleteFile(arg0 context.Context, arg1 *proto.File, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {      
        m.ctrl.T.Helper()
        varargs := []interface{}{arg0, arg1}
        for _, a := range arg2 {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "DeleteFile", varargs...)
        ret0, _ := ret[0].(*emptypb.Empty)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockManagementServiceClientMockRecorder) DeleteFile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{arg0, arg1}, arg2...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockManagementServiceClient)(nil).DeleteFile), varargs...)
}

// DeleteLoginData mocks base method.
func (m *MockManagementServiceClient) DeleteLoginData(arg0 context.Context, arg1 *proto.LoginData, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
        m.ctrl.T.Helper()
        varargs := []interface{}{arg0, arg1}
        for _, a := range arg2 {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "DeleteLoginData", varargs...)
        ret0, _ := ret[0].(*emptypb.Empty)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// DeleteLoginData indicates an expected call of DeleteLoginData.
func (mr *MockManagementServiceClientMockRecorder) DeleteLoginData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{arg0, arg1}, arg2...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoginData", reflect.TypeOf((*MockManagementServiceClient)(nil).DeleteLoginData), varargs...)
}

// DeleteText mocks base method.
func (m *MockManagementServiceClient) DeleteText(arg0 context.Context, arg1 *proto.Text, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {      
        m.ctrl.T.Helper()
        varargs := []interface{}{arg0, arg1}
        for _, a := range arg2 {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "DeleteText", varargs...)
        ret0, _ := ret[0].(*emptypb.Empty)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// DeleteText indicates an expected call of DeleteText.
func (mr *MockManagementServiceClientMockRecorder) DeleteText(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{arg0, arg1}, arg2...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteText", reflect.TypeOf((*MockManagementServiceClient)(nil).DeleteText), varargs...)
}

// EditLoginData mocks base method.
func (m *MockManagementServiceClient) EditLoginData(arg0 context.Context, arg1 *proto.LoginData, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
        m.ctrl.T.Helper()
        varargs := []interface{}{arg0, arg1}
        for _, a := range arg2 {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "EditLoginData", varargs...)
        ret0, _ := ret[0].(*emptypb.Empty)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// EditLoginData indicates an expected call of EditLoginData.
func (mr *MockManagementServiceClientMockRecorder) EditLoginData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{arg0, arg1}, arg2...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditLoginData", reflect.TypeOf((*MockManagementServiceClient)(nil).EditLoginData), varargs...)
}

// GetFile mocks base method.
func (m *MockManagementServiceClient) GetFile(arg0 context.Context, arg1 *proto.File, arg2 ...grpc.CallOption) (*proto.File, error) {
        m.ctrl.T.Helper()
        varargs := []interface{}{arg0, arg1}
        for _, a := range arg2 {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "GetFile", varargs...)
        ret0, _ := ret[0].(*proto.File)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockManagementServiceClientMockRecorder) GetFile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{arg0, arg1}, arg2...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockManagementServiceClient)(nil).GetFile), varargs...)}