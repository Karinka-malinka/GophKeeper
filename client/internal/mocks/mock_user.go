// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GophKeeper/api/proto (interfaces: UserServiceClient)

// Package mock_proto is a generated GoMock package.
package mocks

import (
        context "context"
        reflect "reflect"

        proto "github.com/GophKeeper/api/proto"
        gomock "github.com/golang/mock/gomock"
        grpc "google.golang.org/grpc"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
        ctrl     *gomock.Controller
        recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
        mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
        mock := &MockUserServiceClient{ctrl: ctrl}
        mock.recorder = &MockUserServiceClientMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
        return m.recorder
}

// Login mocks base method.
func (m *MockUserServiceClient) Login(arg0 context.Context, arg1 *proto.UserRequest, arg2 ...grpc.CallOption) (*proto.UserResponse, error) {        
        m.ctrl.T.Helper()
        varargs := []interface{}{arg0, arg1}
        for _, a := range arg2 {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "Login", varargs...)
        ret0, _ := ret[0].(*proto.UserResponse)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceClientMockRecorder) Login(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{arg0, arg1}, arg2...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceClient)(nil).Login), varargs...)
}

// Register mocks base method.
func (m *MockUserServiceClient) Register(arg0 context.Context, arg1 *proto.UserRequest, arg2 ...grpc.CallOption) (*proto.UserResponse, error) {     
        m.ctrl.T.Helper()
        varargs := []interface{}{arg0, arg1}
        for _, a := range arg2 {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "Register", varargs...)
        ret0, _ := ret[0].(*proto.UserResponse)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceClientMockRecorder) Register(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{arg0, arg1}, arg2...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserServiceClient)(nil).Register), varargs...)       
}