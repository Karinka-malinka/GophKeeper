// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GophKeeper/server/internal/app/logindata (interfaces: ILoginDataStore)

// Package mock_textdata is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	textdata "github.com/GophKeeper/server/internal/app/textdata"
	gomock "github.com/golang/mock/gomock"
)

// MockITextDataStore is a mock of ITextDataStore interface.
type MockITextDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockITextDataStoreMockRecorder
}

// MockITextDataStoreMockRecorder is the mock recorder for MockITextDataStore.
type MockITextDataStoreMockRecorder struct {
	mock *MockITextDataStore
}

// NewMockITextDataStore creates a new mock instance.
func NewMockITextDataStore(ctrl *gomock.Controller) *MockITextDataStore {
	mock := &MockITextDataStore{ctrl: ctrl}
	mock.recorder = &MockITextDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITextDataStore) EXPECT() *MockITextDataStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITextDataStore) Create(arg0 context.Context, arg1 textdata.TextData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockITextDataStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITextDataStore)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockITextDataStore) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITextDataStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITextDataStore)(nil).Delete), arg0, arg1)
}

// GetList mocks base method.
func (m *MockITextDataStore) GetList(arg0 context.Context, arg1 string) ([]textdata.TextData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", arg0, arg1)
	ret0, _ := ret[0].([]textdata.TextData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockITextDataStoreMockRecorder) GetList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockITextDataStore)(nil).GetList), arg0, arg1)
}
